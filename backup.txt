from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import sqlite3
import os
from datetime import datetime

DB_FILE = "bookings.db"

app = FastAPI(title="Coolie No.1 Production")

# CORS for frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # change to frontend URL in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize DB
if not os.path.exists(DB_FILE):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''CREATE TABLE bookings
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  passenger TEXT,
                  city TEXT,
                  luggage REAL,
                  arrival TEXT,
                  service TEXT,
                  helper TEXT,
                  fare REAL,
                  timestamp TEXT)''')
    conn.commit()
    conn.close()

class Booking(BaseModel):
    name: str
    city: str
    luggage_weight: float
    arrival_time: str
    service_type: str

@app.post("/book")
def book_trolley(data: Booking):
    fare = 30 + data.luggage_weight*2.5
    helper = "Assigned Helper " + str(data.city[:2].upper())

    timestamp = datetime.now().isoformat()
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''INSERT INTO bookings(passenger, city, luggage, arrival, service, helper, fare, timestamp)
                 VALUES(?,?,?,?,?,?,?,?)''',
                 (data.name, data.city, data.luggage_weight, data.arrival_time, data.service_type, helper, fare, timestamp))
    conn.commit()
    conn.close()

    return {
        "status": "success",
        "passenger": data.name,
        "city": data.city,
        "arrival": data.arrival_time,
        "luggage": data.luggage_weight,
        "service": data.service_type,
        "assigned_helper": helper,
        "fare": fare,
        "timestamp": timestamp
    }

@app.get("/bookings")
def get_bookings():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT passenger, city, luggage, arrival, service, helper, fare, timestamp FROM bookings ORDER BY id DESC")
    rows = c.fetchall()
    conn.close()
    return {"bookings": [dict(zip(["passenger","city","luggage","arrival","service","helper","fare","timestamp"], r)) for r in rows]}

